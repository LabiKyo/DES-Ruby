# encoding: UTF-8
require "des"

KEY_HEX = '3b3898371520f75e'
KEY_BIT = '0011101100111000100110000011011100010101001000001111011101011110'
ROUND = [
  '01000100110000000110101111011100100111011000100001111111', # ROUND[0]
  '10001001100000001101011110101001001110110001000011111111', # ROUND[1]
  '00010011000000011010111101010010011101100010000111111111', # ROUND[2]
  '01001100000001101011110101001001110110001000011111111100', # ROUND[3]
  '00110000000110101111010100010111011000100001111111110010', # ROUND[4]
  '11000000011010111101010001001101100010000111111111001001', # ROUND[5]
  '00000001101011110101000100110110001000011111111100100111', # ROUND[6]
  '00000110101111010100010011001000100001111111110010011101', # ROUND[7]
  '00011010111101010001001100000010000111111111001001110110', # ROUND[8]
  '00110101111010100010011000000100001111111110010011101100', # ROUND[9]
  '11010111101010001001100000000000111111111001001110110001', # ROUND[10]
  '01011110101000100110000000110011111111100100111011000100', # ROUND[11]
  '01111010100010011000000011011111111110010011101100010000', # ROUND[12]
  '11101010001001100000001101011111111001001110110001000011', # ROUND[13]
  '10101000100110000000110101111111100100111011000100001111', # ROUND[14]
  '10100010011000000011010111101110010011101100010000111111', # ROUND[15]
  '01000100110000000110101111011100100111011000100001111111', # ROUND[16]
]
SK = [
  '', # no such subkey
  '010111000000100001001100010101011000111101001111', # SK[1]
  '010100010010110111110000011001001001011111001100', # SK[2]
  '110101001110010010000101110110001011010011101111', # SK[3]
  '010100111000011100000110011011101101111010101001', # SK[4]
  '011010001001000010100111000110100111110101111011', # SK[5]
  '101100011000000001101110101011111101100100110000', # SK[6]
  '101000000100001010110010110000010110111101110010', # SK[7]
  '101101000001101100110100111111011000101000011100', # SK[8]
  '001000101101110101000010100100111000011001111100', # SK[9]
  '011010000110000101010111110110011011111110000100', # SK[10]
  '001001011100010100011001001110000110011010111101', # SK[11]
  '010001110000000110110011011110110111100010000111', # SK[12]
  '101111111000100010010001101001100110000110111011', # SK[13]
  '000111110010001010001010101001110011101101000111', # SK[14]
  '001110100001010010011100111101101000001111110010', # SK[15]
  '000100010111110010000001110101111110000101001110', # SK[16]
]
PLAIN_ASCII = 'abcdefgh'
PLAIN_BIT = '0110000101100010011000110110010001100101011001100110011101101000'
SECRET_ASCII = '"b\xE0\xC6\x8CH\xE4u\xED"'
SECRET_BIT = '0110001011100000110001101000110001001000111001000111010111101101'
LR = [
  '1111111100000000011110000101010100000000111111111000000001100110', # LR[0]
  '0000000011111111100000000110011010100000101001110010001001111010', # LR[1]
  '1010000010100111001000100111101000110010011110010011111101100010', # LR[2]
  '0011001001111001001111110110001000001100011100000000000100101101', # LR[3]
  '0000110001110000000000010010110100001111010010000011100001000000', # LR[4]
  '0000111101001000001110000100000011011011000111001000110011000111', # LR[5]
  '1101101100011100100011001100011100110101111010110100001010001111', # LR[6]
  '0011010111101011010000101000111100110100100010101010100010100011', # LR[7]
  '0011010010001010101010001010001111010110100001110110000010000010', # LR[8]
  '1101011010000111011000001000001011010000001101011110001101111011', # LR[9]
  '1101000000110101111000110111101110011011101111101000010001100111', # LR[10]
  '1001101110111110100001000110011100100011101011111010010000001111', # LR[11]
  '0010001110101111101001000000111100101100111100111011001101111000', # LR[12]
  '0010110011110011101100110111100000110001111000000111111111010011', # LR[13]
  '0011000111100000011111111101001100001101000010000010000011100011', # LR[14]
  '0000110100001000001000001110001110101110111000111001100000000101', # LR[15]
  '1010111011100011100110000000010111110111010000001110110011000000', # LR[16]
]

ER = [
  '', # none
  '000000000001011111111111110000000000001100001100', # ER[1]
  '010100000001010100001110100100000100001111110101', # ER[2]
  '000110100100001111110010100111111110101100000100', # ER[3]
  '100001011000001110100000000000000010100101011010', # ER[4]
  '000001011110101001010000000111110000001000000000', # ER[5]
  '111011110110100011111001010001011001011000001111', # ER[6]
  '100110101011111101010110101000000101010001011110', # ER[7]
  '100110101001010001010101010101010001010100000110', # ER[8]
  '011010101101010000001110101100000001010000000101', # ER[9]
  '111010100000000110101011111100000110101111110111', # ER[10]
  '110011110111110111111101010000001000001100001111', # ER[11]
  '100100000111110101011111110100001000000001011110', # ER[12]
  '000101011001011110100111110110100110101111110000', # ER[13]
  '100110100011111100000000001111111111111010100110', # ER[14]
  '100001011010100001010000000100000001011100000110', # ER[15]
  '110101011101011100000111110011110000000000001011', # ER[16]
]

MIXIN = [
  '', # none
  '010111000001111110110011100101011000110001000011', # MIXIN[1]
  '000000010011100011111110111101001101010000111001', # MIXIN[2]
  '110011101010011101110111010001110101111111101011', # MIXIN[3]
  '110101100000010010100110011011101111011111110011', # MIXIN[4]
  '011011010111101011110111000001010111111101111011', # MIXIN[5]
  '010111101110100010010111111010100100111100111111', # MIXIN[6]
  '001110101111110111100100011000010011101100101100', # MIXIN[7]
  '001011101000111101100001101010001001111100011010', # MIXIN[8]
  '010010000000100101001100001000111001001001111001', # MIXIN[9]
  '100000100110000011111100001010011101010001110011', # MIXIN[10]
  '111010101011100011100100011110001110010110110010', # MIXIN[11]
  '110101110111110011101100101010111111100011011001', # MIXIN[12]
  '101010100001111100110110011111000000101001001011', # MIXIN[13]
  '100001010001110110001010100110001100010111100001', # MIXIN[14]
  '101111111011110011001100111001101001010011110100', # MIXIN[15]
  '110001001010101110000110000110001110000101000101', # MIXIN[16]
]

SR = [
  '', # none
  '10110011011101001100111010011111', # SR[1]
  '11100000101001000101100100110011', # SR[2]
  '10110100111110110101000111001010', # SR[3]
  '00110000110100001001101001101100', # SR[4]
  '01011010100110111110111000110101', # SR[5]
  '10110001011011000011111110011011', # SR[6]
  '10000010001110011101000101111110', # SR[7]
  '00101010001000111101011110010000', # SR[8]
  '10101111110110010111011001000011', # SR[9]
  '01001011011110001010001111101100', # SR[10]
  '10101111101010011001100001110110', # SR[11]
  '00111100111101111101110110110000', # SR[12]
  '01101101111011100110110000010011', # SR[13]
  '11111100110001101011011011000010', # SR[14]
  '01110101111110011010100100111010', # SR[15]
  '01011011000000110001100010111101', # SR[16]
]

FR = [
  '', # none
  '01011111101001110101101000101111', # FR[1]
  '00110010100001101011111100000100', # FR[2]
  '10101100110101110010001101010111', # FR[3]
  '00111101001100010000011100100010', # FR[4]
  '11010111011011001000110111101010', # FR[5]
  '00111010101000110111101011001111', # FR[6]
  '11101111100101100010010001100100', # FR[7]
  '11100011011011000010001000001101', # FR[8]
  '11100100101111110100101111011000', # FR[9]
  '01001101001110011110010011100101', # FR[10]
  '11110011100110100100011101110100', # FR[11]
  '10110111010011010011011100011111', # FR[12]
  '00010010010011111101101111011100', # FR[13]
  '00100001111110111001001110011011', # FR[14]
  '10011111000000111110011111010110', # FR[15]
  '11111010010010001100110000100011', # FR[16]
]

S1 = "
14  4   13  1   2   15  11  8   3   10  6   12  5   9   0   7
0   15  7   4   14  2   13  1   10  6   12  11  9   5   3   8
4   1   14  8   13  6   2   11  15  12  9   7   3   10  5   0
15  12  8   2   4   9   1   7   5   11  3   14  10  0   6   13
"

describe String do
  context "when calling #is_hex" do
    it "return true if it's hex" do
      KEY_HEX.is_hex.should be_true
      KEY_HEX.upcase.is_hex.should be_true
    end
    it "return false if it contain not-hex characters" do
      '3b3898371520f75g'.is_hex.should be_false
      '3b3898371520f75G'.is_hex.should be_false
    end
  end
  context "when calling #left_rotate(i)" do
    it "left rotate i bits" do
      "01234".left_rotate(1).should eq "12340"
      "01234".left_rotate(2).should eq "23401"
    end
  end
end

describe Key do
  before :each do
    @key = Key.new KEY_HEX
  end

  # initialize
  it "initialize with 16 hex numbers" do
    key = Key.new KEY_HEX
    key.key.should eq KEY_BIT
  end
  it "raise an error when initialize with wrong arguments" do
    expect {
      Key.new '123'
    }.to raise_error ArgumentError
  end

  # sub-key rounds
  0.upto 16 do |round|
    it "has the right sub-key round #{round}" do
      @key.round[round].should eq ROUND[round]
    end
  end

  # sub-keys
  1.upto 16 do |round|
    it "has the right subkey #{round}" do
      @key.subkey[round].should eq SK[round]
    end
  end

  # encrypt
  context "when encrypting" do
    before :each do
      @entity_secret = @key.entity_encrypt PLAIN_BIT
    end

    0.upto 16 do |round|
      it "has the right left/right #{round}" do
        (@entity_secret[:left][round] + @entity_secret[:right][round]).should eq LR[round]
      end
      it "has the right e-right #{round}" do
        @entity_secret[:e_right][round].should eq ER[round]
      end
      it "has the right minxin #{round}" do
        @entity_secret[:mixin][round].should eq MIXIN[round]
      end

      it "has the right s-right #{round}" do
        @entity_secret[:s_right][round].should eq SR[round]
      end

      it "has the right f-right #{round}" do
        @entity_secret[:f_right][round].should eq FR[round]
      end
    end
    it "has the right secret string" do
      @entity_secret[:secret].should eq SECRET_BIT
    end

  end

  # decrypt
  context "when decrypting" do
  end

  describe SBox do
    it "initialize with 12 x 4 table string" do
      sbox = SBox.new S1
    end
    context "when calling SBox#get" do
      it "return right bit string" do
        s1 = SBox.new S1
        s1.get('000000').should eq '1110' # S1[1][1] == 14
        s1.get('000010').should eq '0100' # S1[1][2] == 4
        s1.get('000001').should eq '0000' # S1[2][1] == 0
        s1.get('101000').should eq '1101' # S1[3][5] == 13
      end
    end
  end
end
